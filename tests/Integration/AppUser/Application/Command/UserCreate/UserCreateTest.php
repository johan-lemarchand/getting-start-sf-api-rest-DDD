<?php

namespace App\Tests\Integration\AppUser\Application\Command\UserCreate;


use Doctrine\DBAL\Exception;
use Faker\Factory;
use App\AppUser\Domain\User\User;
use App\AppUser\Infrastructure\Doctrine\User\UserDoctrineRepository;
use App\AppUser\Application\Command\UserCreate\UserCreateCommand;
use App\AppUser\Application\Command\UserCreate\UserCreateCommandHandler;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher;

class UserCreateTest extends WebTestCase
{
    private UserDoctrineRepository  $_repository;

    private UserPasswordHasher $_userPasswordHasher;

    /**
     * @throws \Exception
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $connection = static::getContainer()
            ->get('doctrine')
            ->getManager();
        $this->_repository = $connection->getRepository(User::class);
        $this->_userPasswordHasher = static::getContainer()->get(UserPasswordHasher::class);
    }

    /**
     * @throws Exception
     */
    public function testCommand()
    {
        $faker = Factory::create('fr_FR');
        $userCreateCommand = new UserCreateCommand($faker->email, $faker->password, 'fr');
        $handler = new UserCreateCommandHandler($this->_repository, $this->_userPasswordHasher);

        if ($handler->dispatch($userCreateCommand)) {
            $this->assertNotEmpty($handler->getUuid());
            $user = $this->_repository->findOneBy(array('uuid' => $handler->getUuid()));
            $this->_repository->remove($user);
        } else {
            $this->assertFalse(false);
        }
    }
}