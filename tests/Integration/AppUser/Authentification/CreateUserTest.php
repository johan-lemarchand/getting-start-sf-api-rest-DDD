<?php

namespace App\Tests\Integration\AppUser\Authentification;


use Doctrine\DBAL\Exception;
use Faker\Factory;
use App\AppUser\Domain\User\User;
use App\AppUser\Infrastructure\Doctrine\User\UserDoctrineRepository;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher;


class CreateUserTest extends WebTestCase
{
    private UserDoctrineRepository  $_repository;
    private KernelBrowser $_client;

    private UserPasswordHasher $_userPasswordHasher;

    /**
     * @throws \Exception
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->_client = static::createClient();
        $connection = static::getContainer()
            ->get('doctrine')
            ->getManager();
        $this->_repository = $connection->getRepository(User::class);
    }


    /**
     * @throws Exception
     */
    public function testConnect()
    {
        $faker = Factory::create('fr_FR');

        $email = $faker->email;
        $password= $faker->password;
        $this->_client->request(
            'POST',
            '/createuser',
            [],
            [],
            ['CONTENT_TYPE' => 'application/json'],
            json_encode([
                'email' => $email,
                'password' => $password,
                'lang' => 'fr'
            ])
        );

        $data = json_decode($this->_client->getResponse()->getContent(), true);

        $uuid = $data['uuid'];

        $user = $this->_repository->findOneBy(array('uuid' => $uuid));
        $this->_client->request(
            'POST',
            '/login_check',
            [],
            [],
            ['CONTENT_TYPE' => 'application/json'],
            json_encode([
                'username' => $email,
                'password' => $password,
            ])
        );

        $data = json_decode($this->_client->getResponse()->getContent(), true);

        $this->_client->setServerParameter('HTTP_Authorization', sprintf('Bearer %s', $data['token']));

        $this->_client->request('GET', '/app/user/profile');

        $this->assertResponseIsSuccessful();
        $this->_repository->remove($user);
        $this->assertSelectorTextContains('title', 'Mon profil');
    }
}

