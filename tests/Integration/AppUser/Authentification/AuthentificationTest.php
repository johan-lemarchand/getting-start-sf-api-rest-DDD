<?php
namespace App\Tests\Integration\AppUser\Authentification;

use App\AppUser\Infrastructure\Doctrine\User\UserDoctrineRepository;
use App\AppUser\Domain\User\User;
use App\Tests\Factory\User\UserFactory;
use App\Tests\Unit\AppUser\DataObject\User\DataObjectUser;

use Doctrine\DBAL\Exception;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher;

class AuthentificationTest extends WebTestCase
{
    private UserDoctrineRepository  $_repository;
    private KernelBrowser $_client;

    private UserPasswordHasher $_userPasswordHasher;

    /**
     * @throws \Exception
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->_client = static::createClient();
        $connection = static::getContainer()
            ->get('doctrine')
            ->getManager();
        $this->_repository = $connection->getRepository(User::class);
        $this->_userPasswordHasher = static::getContainer()->get(UserPasswordHasher::class);
    }


    /**
     * @throws Exception
     */
    public function testConnect()
    {
        $dataObjectUser = UserFactory::getFake($this->_userPasswordHasher);

        $user = $dataObjectUser->user;
        $this->_repository->save($user);
        $user = $this->_repository->findOneBy(array('uuid' => $dataObjectUser->uuid));
        $this->_client->request(
            'POST',
            '/login_check',
            [],
            [],
            ['CONTENT_TYPE' => 'application/json'],
            json_encode([
                'username' => $user->getEmail(),
                'password' => $dataObjectUser->password,
            ])
        );

        $data = json_decode($this->_client->getResponse()->getContent(), true);

        $this->_client->setServerParameter('HTTP_Authorization', sprintf('Bearer %s', $data['token']));

        //$this->_client = $this->_client->loginUser($user);

        $this->_client->request('GET', '/app/user/profile');

        $this->assertResponseIsSuccessful();
        $this->_repository->remove($user);
        $this->assertSelectorTextContains('title', 'Mon profil');
    }
}

